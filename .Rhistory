# pair_plot <- ggpairs(pair_data[,1:5], aes(color = truth, alpha = 0.5),
#         upper = list(continuous = wrap('cor', size = 2)))+
#   scale_fill_manual(values=c('red','green','blue')) +
#   scale_colour_manual(values=c('red','green','blue'))
# pair_plot
noisy_label <- df_label[, 6:13]
colnames(noisy_label) <- c("truth", "E1","E2","E3","E4","N1","N2","N3")
misclassification <- noisy_label %>%
group_by(truth) %>%
summarize(across(starts_with("E") | starts_with("N"), ~ mean(. != truth) * 100))
misclassification_total <- noisy_label %>%
summarize(across(starts_with("E") | starts_with("N"), ~ mean(. != truth) * 100))%>%
mutate(truth = "total", .before = 1)
# Calculate agreement percentages
agreement_counts <- misclassification %>%
mutate(across(starts_with("E") | starts_with("N"), ~ 100 - .))
# Add a "Total" row
total_agreement <- misclassification_total %>%
mutate(across(starts_with("E") | starts_with("N"), ~ 100 - .))
# Combine the "Total" row with the agreement_counts data
agreement_counts_with_total <- bind_rows(agreement_counts, total_agreement)
# Melt the data for plotting
melted_agreement <- melt(agreement_counts_with_total, id.vars = "truth", variable.name = "Annotator")
melted_agreement_single <- melt(agreement_counts, id.vars= "truth", variable.name = "Annotator")
melted_agreement_total <- melt(total_agreement, id.vars = "truth", variable.name = "Annotator")
# Create the heatmap
custom_blue_palette <- c("#EFF3FF", "#BDD7E7", "#6BAED6", "#3182BD", "#08519C")
custom_yellow_blue_palette <- c("#FFFFD9", "#EDF8B1", "#C7E9B4", "#7FCDBB", "#41B6C4", "#1D91C0", "#225EA8", "#253494", "#081D58")
custom_pubu_palette <- c("#F1EEF6", "#D0D1E6", "#A6BDDB", "#74A9CF", "#3690C0", "#0570B0", "#045A8D", "#023858")
selected_palette <- custom_pubu_palette
plot_single <- ggplot(data = melted_agreement_single, aes(x = Annotator, y = truth)) +
geom_tile(aes(fill = value, height = 1,width = 1), color = "white") +
scale_fill_gradient(low = selected_palette[1], high =selected_palette[length(selected_palette)-1], limits = c(20, 100))+
labs(x = "", y = "", title = "Annotators Agreement with Truth Labels") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
#theme(axis.text.x = element_blank()) +
scale_y_discrete(position = "left")
plot_total <- ggplot(data = melted_agreement_total, aes(x = Annotator, y = truth)) +
geom_tile(aes(fill = value, height = 1,width = 1), color = "white") +
geom_text(aes(label = round(value, 1)), vjust = 1) +
scale_fill_gradient(low = selected_palette[1], high = selected_palette[length(selected_palette)-1], limits = c(45, 70)) +
labs(x = "Annotator", y = "", title = "") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_discrete(position = "left") +
guides(fill = FALSE)
# Combine the two plots using grid.arrange
grid_plot <- grid.arrange(
plot_single, plot_total,
ncol = 1, nrow = 2,
heights = c(2, 1)#, widths = c(1, 0.8)
)
grid.draw(grid_plot)
library(gridExtra)
path <- getwd()
pair_data <- df_label[,1:6]
colnames(pair_data) <- c("V113", "V173", "V475", "V489","V603")
pair_plot <- ggpairs(pair_data[,1:5], aes(color = ground_truth, alpha = 0.5),
upper = list(continuous = wrap('cor', size = 2)))+
scale_fill_manual(values=c('red','green','blue')) +
scale_colour_manual(values=c('red','green','blue'))
pair_plot
View(pair_data)
library(gridExtra)
path <- getwd()
pair_data <- df_label[,1:6]
colnames(pair_data) <- c("V113", "V173", "V475", "V489","V603","truth")
pair_plot <- ggpairs(pair_data[,1:5], aes(color = truth, alpha = 0.5),
upper = list(continuous = wrap('cor', size = 2)))+
scale_fill_manual(values=c('red','green','blue')) +
scale_colour_manual(values=c('red','green','blue'))
pair_plot
View(pair_data)
library(gridExtra)
path <- getwd()
pair_data <- df_label[,1:6]
colnames(pair_data) <- c("V113", "V173", "V475", "V489","V603","truth")
pair_plot <- ggpairs(pair_data[,1:5], aes(color = truth, alpha = 0.5),
upper = list(continuous = wrap('cor', size = 2)))+
scale_fill_manual(values=c('red','green','blue')) +
scale_colour_manual(values=c('red','green','blue'))
pair_plot
library(gridExtra)
path <- getwd()
pair_data <- df_label[,1:6]
colnames(pair_data) <- c("V113", "V173", "V475", "V489","V603","truth")
pair_plot <- ggpairs(pair_data[,1:6], aes(color = truth, alpha = 0.5),
upper = list(continuous = wrap('cor', size = 2)))+
scale_fill_manual(values=c('red','green','blue')) +
scale_colour_manual(values=c('red','green','blue'))
pair_plot
noisy_label <- df_label[, 6:13]
colnames(noisy_label) <- c("truth", "E1","E2","E3","E4","N1","N2","N3")
misclassification <- noisy_label %>%
group_by(truth) %>%
summarize(across(starts_with("E") | starts_with("N"), ~ mean(. != truth) * 100))
misclassification_total <- noisy_label %>%
summarize(across(starts_with("E") | starts_with("N"), ~ mean(. != truth) * 100))%>%
mutate(truth = "total", .before = 1)
# Calculate agreement percentages
agreement_counts <- misclassification %>%
mutate(across(starts_with("E") | starts_with("N"), ~ 100 - .))
# Add a "Total" row
total_agreement <- misclassification_total %>%
mutate(across(starts_with("E") | starts_with("N"), ~ 100 - .))
# Combine the "Total" row with the agreement_counts data
agreement_counts_with_total <- bind_rows(agreement_counts, total_agreement)
# Melt the data for plotting
melted_agreement <- melt(agreement_counts_with_total, id.vars = "truth", variable.name = "Annotator")
melted_agreement_single <- melt(agreement_counts, id.vars= "truth", variable.name = "Annotator")
melted_agreement_total <- melt(total_agreement, id.vars = "truth", variable.name = "Annotator")
# Create the heatmap
custom_blue_palette <- c("#EFF3FF", "#BDD7E7", "#6BAED6", "#3182BD", "#08519C")
custom_yellow_blue_palette <- c("#FFFFD9", "#EDF8B1", "#C7E9B4", "#7FCDBB", "#41B6C4", "#1D91C0", "#225EA8", "#253494", "#081D58")
custom_pubu_palette <- c("#F1EEF6", "#D0D1E6", "#A6BDDB", "#74A9CF", "#3690C0", "#0570B0", "#045A8D", "#023858")
selected_palette <- custom_pubu_palette
plot_single <- ggplot(data = melted_agreement_single, aes(x = Annotator, y = truth)) +
geom_tile(aes(fill = value, height = 1,width = 1), color = "white") +
scale_fill_gradient(low = selected_palette[1], high =selected_palette[length(selected_palette)-1], limits = c(20, 100))+
labs(x = "", y = "", title = "Annotators Agreement with Truth Labels") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
#theme(axis.text.x = element_blank()) +
scale_y_discrete(position = "left")
plot_total <- ggplot(data = melted_agreement_total, aes(x = Annotator, y = truth)) +
geom_tile(aes(fill = value, height = 1,width = 1), color = "white") +
geom_text(aes(label = round(value, 1)), vjust = 1) +
scale_fill_gradient(low = selected_palette[1], high = selected_palette[length(selected_palette)-1], limits = c(45, 70)) +
labs(x = "Annotator", y = "", title = "") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_discrete(position = "left") +
guides(fill = FALSE)
# Combine the two plots using grid.arrange
grid_plot <- grid.arrange(
plot_single, plot_total,
ncol = 1, nrow = 2,
heights = c(2, 1)#, widths = c(1, 0.8)
)
grid.draw(grid_plot)
View(df_label)
View(df_label)
data <- read.csv("data/data.txt")
library(readxl)
ground_truth <- as.data.frame(read_excel("data/ground_truth.xlsx"))
colnames(ground_truth) <- ground_truth[2,]
ground_truth <- ground_truth[3:78,1:9]
ground_truth <- ground_truth[order(ground_truth$LESION),]
set <- c(114, 174, 476, 490, 604)
df <- t(data[set,seq(1,152,2)])
df <- df[order(rownames(df)),]
Y <- data.frame("Expert1" = ground_truth$`EXPERT 1`,
"Expert2" = ground_truth$`EXPERT 2`,
"Expert3" = ground_truth$`EXPERT 3`,
"Expert4" = ground_truth$`EXPERT 4`,
"Beginner1" = ground_truth$`BEGINNER 1`,
"Beginner2" = ground_truth$`BEGINNER 2`,
"Beginner3" = ground_truth$`BEGINNER 3`)
df_label <- data.frame(df,
"truth" = ground_truth$`GROUND TRUTH`,
Y)
N= 50
df_label
data <- read.csv("data/data.txt")
library(readxl)
ground_truth <- as.data.frame(read_excel("data/ground_truth.xlsx"))
colnames(ground_truth) <- ground_truth[2,]
ground_truth <- ground_truth[3:78,1:9]
ground_truth <- ground_truth[order(ground_truth$LESION),]
set <- c(114, 174, 476, 490, 604)
df <- t(data[set,seq(1,152,2)])
df <- df[order(rownames(df)),]
Y <- data.frame("Expert1" = ground_truth$`EXPERT 1`,
"Expert2" = ground_truth$`EXPERT 2`,
"Expert3" = ground_truth$`EXPERT 3`,
"Expert4" = ground_truth$`EXPERT 4`,
"Beginner1" = ground_truth$`BEGINNER 1`,
"Beginner2" = ground_truth$`BEGINNER 2`,
"Beginner3" = ground_truth$`BEGINNER 3`)
df_label <- data.frame(df,
"truth" = ground_truth$`GROUND TRUTH`,
Y)
N= 50
data <- lapply(df_label, function(col) {
if(is.character(col)) {
factor(col)
} else {
col
}
})
data
data <- read.csv("data/data.txt")
library(readxl)
ground_truth <- as.data.frame(read_excel("data/ground_truth.xlsx"))
colnames(ground_truth) <- ground_truth[2,]
ground_truth <- ground_truth[3:78,1:9]
ground_truth <- ground_truth[order(ground_truth$LESION),]
set <- c(114, 174, 476, 490, 604)
df <- t(data[set,seq(1,152,2)])
df <- df[order(rownames(df)),]
Y <- data.frame("Expert1" = ground_truth$`EXPERT 1`,
"Expert2" = ground_truth$`EXPERT 2`,
"Expert3" = ground_truth$`EXPERT 3`,
"Expert4" = ground_truth$`EXPERT 4`,
"Beginner1" = ground_truth$`BEGINNER 1`,
"Beginner2" = ground_truth$`BEGINNER 2`,
"Beginner3" = ground_truth$`BEGINNER 3`)
df_label <- data.frame(df,
"truth" = ground_truth$`GROUND TRUTH`,
Y)
N= 50
data <- lapply(df_label, function(col) {
if(is.character(col)) {
factor(col)
} else {
col
}
})
data <- lapply(data, function(col) {
if(is.factor(col)) {
as.numeric(col)
} else {
col
}
})
data
data <- read.csv("data/data.txt")
library(readxl)
ground_truth <- as.data.frame(read_excel("data/ground_truth.xlsx"))
colnames(ground_truth) <- ground_truth[2,]
ground_truth <- ground_truth[3:78,1:9]
ground_truth <- ground_truth[order(ground_truth$LESION),]
set <- c(114, 174, 476, 490, 604)
df <- t(data[set,seq(1,152,2)])
df <- df[order(rownames(df)),]
Y <- data.frame("Expert1" = ground_truth$`EXPERT 1`,
"Expert2" = ground_truth$`EXPERT 2`,
"Expert3" = ground_truth$`EXPERT 3`,
"Expert4" = ground_truth$`EXPERT 4`,
"Beginner1" = ground_truth$`BEGINNER 1`,
"Beginner2" = ground_truth$`BEGINNER 2`,
"Beginner3" = ground_truth$`BEGINNER 3`)
df_label <- data.frame(df,
"truth" = ground_truth$`GROUND TRUTH`,
Y)
N= 50
data <- lapply(df_label, function(col) {
if(is.character(col)) {
factor(col)
} else {
col
}
})
data <- lapply(data, function(col) {
if(is.factor(col)) {
as.numeric(col)
} else {
col
}
})
as.data.frame(data)
View(df_label)
data
as.data.frame(data)
library(mclust)
source("model/prediction_ensemble_model.R")
source("model/ensemble_model.R")
source("model/select_observation.R")
source("model/score.R")
source("model/model_comparison.R")
source("model/weights_generation.R")
source("model/simulation.R")
source("model/visualizationResult.R")
library(caret)
library(rsample)
library(mvtnorm)
library(LaplacesDemon)
library(gtools)
library(DirichletReg)
library(grid)
library(gridExtra)
library(dplyr)
library(ggplot2)
library(GGally)
library(reshape2)
data <- read.csv("data/data.txt")
library(readxl)
ground_truth <- as.data.frame(read_excel("data/ground_truth.xlsx"))
colnames(ground_truth) <- ground_truth[2,]
ground_truth <- ground_truth[3:78,1:9]
ground_truth <- ground_truth[order(ground_truth$LESION),]
set <- c(114, 174, 476, 490, 604)
df <- t(data[set,seq(1,152,2)])
df <- df[order(rownames(df)),]
Y <- data.frame("Expert1" = ground_truth$`EXPERT 1`,
"Expert2" = ground_truth$`EXPERT 2`,
"Expert3" = ground_truth$`EXPERT 3`,
"Expert4" = ground_truth$`EXPERT 4`,
"Beginner1" = ground_truth$`BEGINNER 1`,
"Beginner2" = ground_truth$`BEGINNER 2`,
"Beginner3" = ground_truth$`BEGINNER 3`)
df_label <- data.frame(df,
"truth" = ground_truth$`GROUND TRUTH`,
Y)
N= 50
data <- lapply(df_label, function(col) {
if(is.character(col)) {
factor(col)
} else {
col
}
})
data <- lapply(data, function(col) {
if(is.factor(col)) {
as.numeric(col)
} else {
col
}
})
data <- as.data.frame(data)
library(gridExtra)
path <- getwd()
pair_data <- df_label[,1:6]
colnames(pair_data) <- c("V113", "V173", "V475", "V489","V603","truth")
pair_plot <- ggpairs(pair_data[,1:6], aes(color = truth, alpha = 0.5),
upper = list(continuous = wrap('cor', size = 2)))+
scale_fill_manual(values=c('red','green','blue')) +
scale_colour_manual(values=c('red','green','blue'))
pair_plot
noisy_label <- df_label[, 6:13]
colnames(noisy_label) <- c("truth", "E1","E2","E3","E4","N1","N2","N3")
misclassification <- noisy_label %>%
group_by(truth) %>%
summarize(across(starts_with("E") | starts_with("N"), ~ mean(. != truth) * 100))
misclassification_total <- noisy_label %>%
summarize(across(starts_with("E") | starts_with("N"), ~ mean(. != truth) * 100))%>%
mutate(truth = "total", .before = 1)
# Calculate agreement percentages
agreement_counts <- misclassification %>%
mutate(across(starts_with("E") | starts_with("N"), ~ 100 - .))
# Add a "Total" row
total_agreement <- misclassification_total %>%
mutate(across(starts_with("E") | starts_with("N"), ~ 100 - .))
# Combine the "Total" row with the agreement_counts data
agreement_counts_with_total <- bind_rows(agreement_counts, total_agreement)
# Melt the data for plotting
melted_agreement <- melt(agreement_counts_with_total, id.vars = "truth", variable.name = "Annotator")
melted_agreement_single <- melt(agreement_counts, id.vars= "truth", variable.name = "Annotator")
melted_agreement_total <- melt(total_agreement, id.vars = "truth", variable.name = "Annotator")
# Create the heatmap
custom_blue_palette <- c("#EFF3FF", "#BDD7E7", "#6BAED6", "#3182BD", "#08519C")
custom_yellow_blue_palette <- c("#FFFFD9", "#EDF8B1", "#C7E9B4", "#7FCDBB", "#41B6C4", "#1D91C0", "#225EA8", "#253494", "#081D58")
custom_pubu_palette <- c("#F1EEF6", "#D0D1E6", "#A6BDDB", "#74A9CF", "#3690C0", "#0570B0", "#045A8D", "#023858")
selected_palette <- custom_pubu_palette
plot_single <- ggplot(data = melted_agreement_single, aes(x = Annotator, y = truth)) +
geom_tile(aes(fill = value, height = 1,width = 1), color = "white") +
scale_fill_gradient(low = selected_palette[1], high =selected_palette[length(selected_palette)-1], limits = c(20, 100))+
labs(x = "", y = "", title = "Annotators Agreement with Truth Labels") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
#theme(axis.text.x = element_blank()) +
scale_y_discrete(position = "left")
plot_total <- ggplot(data = melted_agreement_total, aes(x = Annotator, y = truth)) +
geom_tile(aes(fill = value, height = 1,width = 1), color = "white") +
geom_text(aes(label = round(value, 1)), vjust = 1) +
scale_fill_gradient(low = selected_palette[1], high = selected_palette[length(selected_palette)-1], limits = c(45, 70)) +
labs(x = "Annotator", y = "", title = "") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_discrete(position = "left") +
guides(fill = FALSE)
# Combine the two plots using grid.arrange
grid_plot <- grid.arrange(
plot_single, plot_total,
ncol = 1, nrow = 2,
heights = c(2, 1)#, widths = c(1, 0.8)
)
grid.draw(grid_plot)
set.seed(901)
output <- data.frame(row.names = 1:N)
acc_LDA <- NULL
acc_QDA <- NULL
acc_EDDA <- NULL
meanEr_LDA <- NULL
meanEr_QDA <- NULL
meanEr_EDDA <- NULL
sigmaEr_LDA <- NULL
sigmaEr_QDA <- NULL
sigmaEr_EDDA <- NULL
acc_single <- NULL
start <- Sys.time()
for (k in 1:N) {
#df_split <- initial_split(df_label, prop = 2 / 3, strata = truth)
df_split <- initial_split(data, prop = 2 / 3, strata = truth)
train_data <- training(df_split)
test_data <- testing(df_split)
X.train <- train_data[, c(1, 2, 3, 4, 5)]
X.test <- test_data[, c(1, 2, 3, 4, 5)]
Y.test <- test_data$truth
Y.train <- train_data[, c(7, 8, 9, 10, 11, 12, 13)]
truth.train <- train_data$truth
setwd("C:/Users/giuli/Documents/GitHub/density-based-ensemble-model")
path = getwd()
path = paste0(path,"/",k)
path_X_train = paste0(path,"X_train.csv")
path_X_test = paste0(path,"X_test.csv")
path_Y_train = paste0(path,"Y_train.csv")
path_y_test = paste0(path,"gt_test.csv")
path_y_train = paste0(path,"gt_train.csv")
write.table(X.train, path_X_train, sep =",", row.names = FALSE, col.names = FALSE)
write.table(X.test, path_X_test, sep =",", row.names = FALSE, col.names = FALSE)
write.table(Y.train, path_Y_train, sep =",", row.names = FALSE, col.names = FALSE)
write.table(as.data.frame(Y.test), path_y_test, sep =",", row.names = FALSE, col.names = FALSE)
write.table(as.data.frame(truth.train), path_y_train, sep =",", row.names = FALSE, col.names = FALSE)
# # weights generation
# weights <- weights_generation(
#   xtrain = X.train,
#   ytrain_noise = Y.train,
#   ytrain = truth.train,
#   ytest = Y.test,
#   Nannotators = 7,
#   N_exp = 4,
#   N_beg = 3,
#   positionExpert = c(1, 1, 1, 1, 0, 0, 0),
#   positionBeginner = c(0, 0, 0, 0, 1, 1, 1)
# )
#
# out <-
#   model_comparison(X.train, X.test, Y.train, truth.train, Y.test, model_weights = weights)
#
# if (k == 1) {
#   acc_LDA <- matrix(NA, N, length(out$ModelNames))
#   acc_QDA <- matrix(NA, N, length(out$ModelNames))
#   acc_EDDA <- matrix(NA, N, length(out$ModelNames))
#
#   meanEr_LDA <- matrix(NA, N, length(out$ModelNames))
#   meanEr_QDA <- matrix(NA, N, length(out$ModelNames))
#   meanEr_EDDA <- matrix(NA, N, length(out$ModelNames))
#
#   sigmaEr_LDA <- matrix(NA, N, length(out$ModelNames))
#   sigmaEr_QDA <- matrix(NA, N, length(out$ModelNames))
#   sigmaEr_EDDA <- matrix(NA, N, length(out$ModelNames))
#
#   acc_single <- matrix(NA, N, 7)
#
#   colnames(acc_LDA) <- out$ModelNames
#   colnames(acc_QDA) <- out$ModelNames
#   colnames(acc_EDDA) <- out$ModelNames
#
#   colnames(meanEr_LDA) <- out$ModelNames
#   colnames(meanEr_QDA) <- out$ModelNames
#   colnames(meanEr_EDDA) <- out$ModelNames
#
#   colnames(sigmaEr_LDA) <- out$ModelNames
#   colnames(sigmaEr_QDA) <- out$ModelNames
#   colnames(sigmaEr_EDDA) <- out$ModelNames
#
#   w <-
#     setNames(lapply(
#       replicate(
#         length(out$ModelNames),
#         matrix(NaN, nrow = 50, ncol = 7),
#         simplify = FALSE
#       ),
#       as.data.frame
#     ), out$ModelNames)
# }
#
# for (name in out$ModelNames) {
#   acc_LDA[k, name] <- out[[name]]$LDA$accuracy
#   acc_QDA[k, name] <- out[[name]]$QDA$accuracy
#   acc_EDDA[k, name] <- out[[name]]$LDA$accuracy
#
#   meanEr_LDA[k, name] <- out[[name]]$LDA$meanError
#   meanEr_QDA[k, name] <- out[[name]]$QDA$meanError
#   meanEr_EDDA[k, name] <- out[[name]]$EDDA$meanError
#
#   sigmaEr_LDA[k, name] <- out[[name]]$LDA$sigmaError
#   sigmaEr_QDA[k, name] <- out[[name]]$QDA$sigmaError
#   sigmaEr_EDDA[k, name] <- out[[name]]$EDDA$sigmaError
#
#   w[[name]][k, ] <- weights[[name]]
#
# }
}
# output <- list(
#   Accuracy = list(
#     AccuracyLDA = acc_LDA,
#     AccuracyQDA = acc_QDA,
#     AccuracyEDDA = acc_EDDA
#   ),
#   MeanError = list(
#     MeanErrorLDA = meanEr_LDA,
#     MeanErrorQDA = meanEr_QDA,
#     MeanErrorEDDA = meanEr_EDDA
#   ),
#   SigmaError = list(
#     SigmaErrorLDA = sigmaEr_LDA,
#     SigmaErrorQDA = sigmaEr_QDA,
#     SigmaErrorEDDA = sigmaEr_EDDA
#   ),
#   weights = w,
#   NumberAnnotators = 7,
#   ModelName = out$ModelNames
# )
#
# print(Sys.time() - start)
# simulationType <- "RealData"
# nameFolder <-
#   paste0(simulationType, format(Sys.time(), "%d-%b%Hh%Mm"))
# visualizationResult(output, name = nameFolder)
