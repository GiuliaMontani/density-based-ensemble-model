library(rsample)
library(mvtnorm)
library(LaplacesDemon)
library(gtools)
library(DirichletReg)
library(grid)
library(gridExtra)
library(ggplot2)
library(reshape2)
library(MASS)
library(clusterGeneration)
library(yaml)
x1 <- rmvnorm(n=500, mean=c(2,2))
x2 <- rmvnorm(n=500, mean=c(-2,-2))
x3 <- rmvnorm(n=500, mean=c(0,0))
X <- rbind(x1,x2,x3)
colors <- c(rep('green', 500), rep('red', 500), rep('blue', 500))
shapes <- c(rep(16, 500), rep(16, 500), rep(16, 500))
plot(X, pch = shapes,col = colors, xlab = "Feature 1", ylab = "Feature 2", main = "Scenario 1")
legend("topright", legend = c("Group 1", "Group 2", "Group 3"), fill = c("green", "red", "blue"))
p = 2
mu <- rbind(rep(2,p),rep(-2,p),rep(0,p))
Nobs = c(50)
count <- 1
set.seed(43)
result <- simulation(S = 50, mu = mu, N= Nobs)
# Set the name of the folder for the result
simulationType <- 1
nameFolder <- paste0(simulationType,"Simulation",format(Sys.time(), "%d-%b%Hh%Mm"))
visualizationResult(result, name = nameFolder)
result <- readRDS("~/GitHub/density-based-ensemble-model/1Simulation25-ott22h20m/result.rds")
View(result)
indexLDA <- c(1,3,8,15,11,9,13,16,17)
models_name <- c("GT","E2","N3","PGT","EN","E","MV","ItAlg1","ItAlg2")
indexLDA <- c(1,3,8,15,11,9,13,16,17)
indexQDA <- c(1,3,8,15,11,9,13,18,18)
indexEDDA <- c(1,3,7,15,11,9,13,19,20)
MSE <- result$MeanError$MeanErrorLDA
MSE <- MSE[,indexLDA]
colnames(MSE) <- models_name
CSE_LDA <- result$SigmaError$SigmaErrorLDA
CSE_LDA <- CSE_LDA[,indexLDA]
colnames(CSE_LDA) <- models_name
CSE_QDA <- result$SigmaError$SigmaErrorQDA
CSE_QDA <- CSE_QDA[,indexQDA]
colnames(CSE_QDA) <- models_name
CSE_EDDA <- result$SigmaError$SigmaErrorEDDA
CSE_EDDA <- CSE_EDDA[,indexEDDA]
colnames(CSE_EDDA) <- models_name
weightsPGT1 <- result$weights$someGT
weightsMV1 <- result$weights$MV1
weightsMV2 <- result$weights$MV2
weightsItAlg1LDA1 <- result$weights$IterAlg1LDA
weightsItAlg2LDA1 <- result$weights$IterAlg2LDA
weightsItAlg1QDA1 <- result$weights$IterAlg1QDA
weightsItAlg2QDA1 <- result$weights$IterAlg2QDA
weightsItAlg1EDDA1 <- result$weights$IterAlg1EDDA
weightsItAlg2EDDA1 <- result$weights$IterAlg2EDDA
library("ggplot2")
library("patchwork")
# Create the mse_data data frame
mse_data <- data.frame(
MSE = c(MSE),
Model = rep(models_name, each = nrow(MSE))
)
ggplot(mse_data, aes(x = Model, y = MSE, fill = Model)) +
geom_boxplot(fill=c("lightgray","lightgray","lightgray"  ,"#999999","#999999" ,"#999999" ,"#999999","#999999" ,"#999999"  ), color="black") +
scale_x_discrete(limits=models_name)+
geom_hline(yintercept=median(MSE[,1]), color = "red")+
geom_hline(yintercept=median(MSE[,5]), linetype="dashed", color = "red")
cse_dataLDA <- data.frame(CSE = c(CSE_LDA), Model = rep(models_name, each = nrow(MSE)))
cse_dataQDA <- data.frame(CSE = c(CSE_QDA), Model = rep(models_name, each = nrow(MSE)))
cse_dataEDDA <- data.frame(CSE = c(CSE_EDDA), Model = rep(models_name, each = nrow(MSE)))
ggplot(cse_dataLDA, aes(x = Model, y = CSE, fill = Model)) +
geom_boxplot(fill = c("lightblue","lightblue","lightblue","deepskyblue","deepskyblue","deepskyblue","deepskyblue","deepskyblue","deepskyblue"), color = "black") +
labs(title = "LDA") +
scale_x_discrete(limits=models_name)+
geom_hline(yintercept=median(CSE_LDA[,1]), color = "red")+
geom_hline(yintercept=median(CSE_LDA[,5]), linetype="dashed", color = "red")+
ylim(0,7)
ggplot(cse_dataQDA, aes(x = Model, y = CSE, fill = Model)) +
geom_boxplot(fill = c("#CC99FF","#CC99FF","#CC99FF","purple","purple","purple","purple","purple","purple"), color = "black") +
labs(title = "QDA") +
scale_x_discrete(limits=models_name)+
geom_hline(yintercept=median(CSE_QDA[,1]), color = "red")+
geom_hline(yintercept=median(CSE_QDA[,5]), linetype="dashed", color = "red")+
ylim(0,7)
ggplot(cse_dataEDDA, aes(x = Model, y = CSE, fill = Model)) +
geom_boxplot(fill = c("#FFF592","#FFF592","#FFF592","#FFEB3B","#FFEB3B","#FFEB3B","#FFEB3B","#FFEB3B","#FFEB3B"), color = "black") +
labs(title = "EDDA") +
scale_x_discrete(limits=models_name)+
geom_hline(yintercept=median(CSE_EDDA[,1]), color = "red")+
geom_hline(yintercept=median(CSE_EDDA[,5]), linetype="dashed", color = "red")+
ylim(0,7)
annotator_name <- c("E1","E2","E3","E4","N1","N2","N3")
annotator_class <- c("E","E","E","E","N","N","N")
weights_data_PGT <- data.frame(
weights = c(as.matrix(weightsPGT1)/rowSums(as.matrix(weightsPGT1))),
annotator = rep(annotator_name, each = nrow(weightsPGT1)),
annotatorClass = rep(annotator_class, each = nrow(weightsPGT1))
)
weights_data_MV2 <- data.frame(
weights = c(as.matrix(weightsMV2)/rowSums(as.matrix(weightsMV2))),
annotator = rep(annotator_name, each = nrow(weightsMV2)),
annotatorClass = rep(annotator_class, each = nrow(weightsMV2))
)
weights_data_italg1LDA <- data.frame(
weights = c(as.matrix(weightsItAlg1LDA1)/rowSums(as.matrix(weightsItAlg1LDA1))),
annotator = rep(annotator_name, each = nrow(weightsItAlg1LDA1)),
annotatorClass = rep(annotator_class, each = nrow(weightsItAlg1LDA1))
)
weights_data_italg2LDA <- data.frame(
weights = c(as.matrix(weightsItAlg2LDA1)/rowSums(as.matrix(weightsItAlg2LDA1))),
annotator = rep(annotator_name, each = nrow(weightsItAlg2LDA1)),
annotatorClass = rep(annotator_class, each = nrow(weightsItAlg2LDA1))
)
path <- getwd()
boxPGT <- ggplot(weights_data_PGT, aes(x = annotator, y = weights, fill = annotatorClass)) +
geom_boxplot(fill = c("#4393C3","#4393C3","#4393C3","#4393C3","#92C5DE","#92C5DE","#92C5DE"), color = "black") +
ylim(0.08,0.2)+
labs(x = "Annotator", y = "Weights", title = "PGT") +
theme(axis.text.x = element_text(size = 16),  # Adjust the x-axis label size (change 12 to your desired size)
axis.text.y = element_text(size = 16),  # Adjust the y-axis label size (change 12 to your desired size)
axis.title.x = element_text(size = 20), # Adjust the x-axis title size (change 14 to your desired size)
axis.title.y = element_text(size = 20),
plot.title = element_text(size = 22))
boxMV <- ggplot(weights_data_MV2, aes(x = annotator, y = weights, fill = annotatorClass)) +
geom_boxplot(fill = c("#4393C3","#4393C3","#4393C3","#4393C3","#92C5DE","#92C5DE","#92C5DE"), color = "black") +
ylim(0.08,0.2) +
labs(x = "Annotator", y = "Weights", title = "MV") +
theme(axis.text.x = element_text(size = 16),  # Adjust the x-axis label size (change 12 to your desired size)
axis.text.y = element_text(size = 16),  # Adjust the y-axis label size (change 12 to your desired size)
axis.title.x = element_text(size = 20), # Adjust the x-axis title size (change 14 to your desired size)
axis.title.y = element_text(size = 20),
plot.title = element_text(size = 22))
boxItAlg1 <- ggplot(weights_data_italg1LDA, aes(x = annotator, y = weights, fill = annotatorClass)) +
geom_boxplot(fill = c("#4393C3","#4393C3","#4393C3","#4393C3","#92C5DE","#92C5DE","#92C5DE"), color = "black") +
ylim(0.08,0.2)+
labs(x = "Annotator", y = "Weights", title = "ItAlg1") +
theme(axis.text.x = element_text(size = 16),  # Adjust the x-axis label size (change 12 to your desired size)
axis.text.y = element_text(size = 16),  # Adjust the y-axis label size (change 12 to your desired size)
axis.title.x = element_text(size = 20), # Adjust the x-axis title size (change 14 to your desired size)
axis.title.y = element_text(size = 20),
plot.title = element_text(size = 22))
boxItAlg2 <- ggplot(weights_data_italg2LDA, aes(x = annotator, y = weights, fill = annotatorClass)) +
geom_boxplot(fill = c("#4393C3","#4393C3","#4393C3","#4393C3","#92C5DE","#92C5DE","#92C5DE"), color = "black") +
ylim(0.08,0.2)+
labs(x = "Annotator", y = "Weights", title = "ItAlg2") +
theme(axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 16),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
plot.title = element_text(size = 22))
grid_plot <- grid.arrange(
boxPGT, boxMV, boxItAlg1, boxItAlg2,
ncol = 2, nrow = 2
)
grid.draw(grid_plot)
View(result)
View(result)
config_file = "config/config_simulation1.yaml"
config <- yaml.load_file(config_file)
config
set.seed(config$set_seed)
p <- config$p
mu <- do.call(rbind, config$mu)
Nobs <- config$Nobs
Nobs
mu
mu[1,]
# Controlla il tipo di simulazione
if (config$simulation_type == 1) {
# Simulazione Scenario 1: Generazione dei dati senza covarianza variabile
x1 <- mvrnorm(n = 500, mu = mu[1,], Sigma = diag(p))
x2 <- mvrnorm(n = 500, mu = mu[2,], Sigma = diag(p))
x3 <- mvrnorm(n = 500, mu = mu[3,], Sigma = diag(p))
X <- rbind(x1, x2, x3)
colors <- c(rep('green', 500), rep('red', 500), rep('blue', 500))
# Plot per Scenario 1
plot(X, col = colors, pch = 16, xlab = "Feature 1", ylab = "Feature 2", main = "Scenario 1")
legend("topright", legend = c("Group 1", "Group 2", "Group 3"), fill = c("green", "red", "blue"))
# Esegui la simulazione
result <- simulation(S = config$S, mu = mu, N = Nobs)
} else if (config$simulation_type == 2) {
# Simulazione Scenario 2: Generazione dei dati con covarianza variabile
Sigma1 <- genPositiveDefMat(p)$Sigma / config$Sigma1_divisor
Sigma2 <- genPositiveDefMat(p)$Sigma / config$Sigma2_divisor
Sigma3 <- genPositiveDefMat(p)$Sigma / config$Sigma3_divisor
x1 <- mvrnorm(n = 500, mu = mu[1,], Sigma = Sigma1)
x2 <- mvrnorm(n = 500, mu = mu[2,], Sigma = Sigma2)
x3 <- mvrnorm(n = 500, mu = mu[3,], Sigma = Sigma3)
X <- rbind(x1, x2, x3)
colors <- c(rep('green', 500), rep('red', 500), rep('blue', 500))
# Plot per Scenario 2
plot(X, col = colors, pch = 16, xlab = "Feature 1", ylab = "Feature 2", main = "Scenario 2")
legend("topright", legend = c("Group 1", "Group 2", "Group 3"), fill = c("green", "red", "blue"))
}
config_file = "config/config_simulation1.yaml"
config <- yaml.load_file(config_file)
set.seed(config$set_seed)
p <- config$p
mu <- do.call(rbind, config$mu)
Nobs <- config$Nobs
# Controlla il tipo di simulazione
if (config$simulation_type == 1) {
# Simulazione Scenario 1: Generazione dei dati senza covarianza variabile
x1 <- mvrnorm(n = 500, mu = mu[1,], Sigma = diag(p))
x2 <- mvrnorm(n = 500, mu = mu[2,], Sigma = diag(p))
x3 <- mvrnorm(n = 500, mu = mu[3,], Sigma = diag(p))
X <- rbind(x1, x2, x3)
colors <- c(rep('green', 500), rep('red', 500), rep('blue', 500))
# Plot per Scenario 1
plot(X, col = colors, pch = 16, xlab = "Feature 1", ylab = "Feature 2", main = "Scenario 1")
legend("topright", legend = c("Group 1", "Group 2", "Group 3"), fill = c("green", "red", "blue"))
} else if (config$simulation_type == 2) {
# Simulazione Scenario 2: Generazione dei dati con covarianza variabile
Sigma1 <- genPositiveDefMat(p)$Sigma / config$Sigma1_divisor
Sigma2 <- genPositiveDefMat(p)$Sigma / config$Sigma2_divisor
Sigma3 <- genPositiveDefMat(p)$Sigma / config$Sigma3_divisor
x1 <- mvrnorm(n = 500, mu = mu[1,], Sigma = Sigma1)
x2 <- mvrnorm(n = 500, mu = mu[2,], Sigma = Sigma2)
x3 <- mvrnorm(n = 500, mu = mu[3,], Sigma = Sigma3)
X <- rbind(x1, x2, x3)
colors <- c(rep('green', 500), rep('red', 500), rep('blue', 500))
# Plot per Scenario 2
plot(X, col = colors, pch = 16, xlab = "Feature 1", ylab = "Feature 2", main = "Scenario 2")
legend("topright", legend = c("Group 1", "Group 2", "Group 3"), fill = c("green", "red", "blue"))
}
config_file = "config/config_simulation2.yaml"
config <- yaml.load_file(config_file)
set.seed(config$set_seed)
p <- config$p
mu <- do.call(rbind, config$mu)
Nobs <- config$Nobs
# Check simulation type
if (config$simulation_type == 1) {
# Simulation Scenario 1
x1 <- mvrnorm(n = 500, mu = mu[1,], Sigma = diag(p))
x2 <- mvrnorm(n = 500, mu = mu[2,], Sigma = diag(p))
x3 <- mvrnorm(n = 500, mu = mu[3,], Sigma = diag(p))
X <- rbind(x1, x2, x3)
colors <- c(rep('green', 500), rep('red', 500), rep('blue', 500))
# Plot for Scenario 1
plot(X, col = colors, pch = 16, xlab = "Feature 1", ylab = "Feature 2", main = "Scenario 1")
legend("topright", legend = c("Group 1", "Group 2", "Group 3"), fill = c("green", "red", "blue"))
} else if (config$simulation_type == 2) {
# Simulation Scenario 2
Sigma1 <- genPositiveDefMat(p)$Sigma / config$Sigma1_divisor
Sigma2 <- genPositiveDefMat(p)$Sigma / config$Sigma2_divisor
Sigma3 <- genPositiveDefMat(p)$Sigma / config$Sigma3_divisor
x1 <- mvrnorm(n = 500, mu = mu[1,], Sigma = Sigma1)
x2 <- mvrnorm(n = 500, mu = mu[2,], Sigma = Sigma2)
x3 <- mvrnorm(n = 500, mu = mu[3,], Sigma = Sigma3)
X <- rbind(x1, x2, x3)
colors <- c(rep('green', 500), rep('red', 500), rep('blue', 500))
# Plot per Scenario 2
plot(X, col = colors, pch = 16, xlab = "Feature 1", ylab = "Feature 2", main = "Scenario 2")
legend("topright", legend = c("Group 1", "Group 2", "Group 3"), fill = c("green", "red", "blue"))
}
setwd("~/GitHub/density-based-ensemble-model")
library(mclust)
source("model/simulation.R")
source("utils/save_simulation_for_paper")
library(mclust)
source("model/simulation.R")
source("utils/save_simulation_for_paper")
library(mclust)
source("model/simulation.R")
source("utils/save_simulation_for_paper")
library(mclust)
source("model/simulation.R")
source("utils/save_simulation_for_paper")
library(mclust)
source("model/simulation.R")
source("utils/save_simulation_for_paper")
library(mclust)
source("model/simulation.R")
source("utils/save_simulation_for_paper")
library(mclust)
source("model/simulation.R")
# source("utils/save_simulation_for_paper")
library(caret)
library(rsample)
library(mvtnorm)
library(LaplacesDemon)
library(gtools)
library(DirichletReg)
library(grid)
library(gridExtra)
library(ggplot2)
library(reshape2)
library(patchwork)
library(MASS)
library(clusterGeneration)
library(yaml)
library(mclust)
source("model/simulation.R")
source("utils/save_simulation_for_paper.R")
library(caret)
library(rsample)
library(mvtnorm)
library(LaplacesDemon)
library(gtools)
library(DirichletReg)
library(grid)
library(gridExtra)
library(ggplot2)
library(reshape2)
library(patchwork)
library(MASS)
library(clusterGeneration)
library(yaml)
config_file = "config/config_simulation1.yaml"
config <- yaml.load_file(config_file)
config
cd <- getwd()
nameFolder <- "results"
path_results = paste0(cd, "/", nameFolder)
path_results
path_results = file.path(cd, nameFolder)
path_results
if (!dir.exists(path_results)) {
dir.create(path_results, recursive = TRUE)
}
set.seed(config$set_seed)
p <- config$p
mu <- do.call(rbind, config$mu)
Nobs <- config$Nobs
# Check simulation type
if (config$simulation_type == 1) {
# Simulation Scenario 1
x1 <- mvrnorm(n = 500, mu = mu[1,], Sigma = diag(p))
x2 <- mvrnorm(n = 500, mu = mu[2,], Sigma = diag(p))
x3 <- mvrnorm(n = 500, mu = mu[3,], Sigma = diag(p))
X <- rbind(x1, x2, x3)
colors <- c(rep('green', 500), rep('red', 500), rep('blue', 500))
# Plot for Scenario 1
imgPath = file.path(path_results, "figure2a.png")
png(file = imgPath)
plot(X, col = colors, pch = 16, xlab = "Feature 1", ylab = "Feature 2", main = "Scenario 1")
legend("topright", legend = c("Group 1", "Group 2", "Group 3"), fill = c("green", "red", "blue"))
dev.off()
} else if (config$simulation_type == 2) {
# Simulation Scenario 2
Sigma1 <- genPositiveDefMat(p)$Sigma / config$Sigma1_divisor
Sigma2 <- genPositiveDefMat(p)$Sigma / config$Sigma2_divisor
Sigma3 <- genPositiveDefMat(p)$Sigma / config$Sigma3_divisor
x1 <- mvrnorm(n = 500, mu = mu[1,], Sigma = Sigma1)
x2 <- mvrnorm(n = 500, mu = mu[2,], Sigma = Sigma2)
x3 <- mvrnorm(n = 500, mu = mu[3,], Sigma = Sigma3)
X <- rbind(x1, x2, x3)
colors <- c(rep('green', 500), rep('red', 500), rep('blue', 500))
# Plot for Scenario 2
imgPath = file.path(path_results, "figure2b.png")
png(file = imgPath)
plot(X, col = colors, pch = 16, xlab = "Feature 1", ylab = "Feature 2", main = "Scenario 2")
legend("topright", legend = c("Group 1", "Group 2", "Group 3"), fill = c("green", "red", "blue"))
dev.off()
}
config_file = "config/config_simulation2.yaml"
config <- yaml.load_file(config_file)
cd <- getwd()
nameFolder <- "results"
path_results = file.path(cd, nameFolder)
if (!dir.exists(path_results)) {
dir.create(path_results, recursive = TRUE)
}
set.seed(config$set_seed)
p <- config$p
mu <- do.call(rbind, config$mu)
Nobs <- config$Nobs
# Check simulation type
if (config$simulation_type == 1) {
# Simulation Scenario 1
x1 <- mvrnorm(n = 500, mu = mu[1,], Sigma = diag(p))
x2 <- mvrnorm(n = 500, mu = mu[2,], Sigma = diag(p))
x3 <- mvrnorm(n = 500, mu = mu[3,], Sigma = diag(p))
X <- rbind(x1, x2, x3)
colors <- c(rep('green', 500), rep('red', 500), rep('blue', 500))
# Plot for Scenario 1
imgPath = file.path(path_results, "figure2a.png")
png(file = imgPath)
plot(X, col = colors, pch = 16, xlab = "Feature 1", ylab = "Feature 2", main = "Scenario 1")
legend("topright", legend = c("Group 1", "Group 2", "Group 3"), fill = c("green", "red", "blue"))
dev.off()
} else if (config$simulation_type == 2) {
# Simulation Scenario 2
Sigma1 <- genPositiveDefMat(p)$Sigma / config$Sigma1_divisor
Sigma2 <- genPositiveDefMat(p)$Sigma / config$Sigma2_divisor
Sigma3 <- genPositiveDefMat(p)$Sigma / config$Sigma3_divisor
x1 <- mvrnorm(n = 500, mu = mu[1,], Sigma = Sigma1)
x2 <- mvrnorm(n = 500, mu = mu[2,], Sigma = Sigma2)
x3 <- mvrnorm(n = 500, mu = mu[3,], Sigma = Sigma3)
X <- rbind(x1, x2, x3)
colors <- c(rep('green', 500), rep('red', 500), rep('blue', 500))
# Plot for Scenario 2
imgPath = file.path(path_results, "figure2b.png")
png(file = imgPath)
plot(X, col = colors, pch = 16, xlab = "Feature 1", ylab = "Feature 2", main = "Scenario 2")
legend("topright", legend = c("Group 1", "Group 2", "Group 3"), fill = c("green", "red", "blue"))
dev.off()
}
sessionInfo()
sessionInfo()
sessionInfo()
source("run_simulation.R", local = list(config_file = "config_scenario1.yml"))
# Save png to produce figure4, figure 5 and figure 6 in the paper
# Save all csv files to produce table 4 in the paper
save_simulation_for_paper(result, config$simulation_type, path_results)
source("utils/save_simulation_for_paper.R")
# Import packages
library(mclust)
source("model/simulation.R")
source("~/GitHub/density-based-ensemble-model/Simulation.R", echo=TRUE)
source("~/GitHub/density-based-ensemble-model/Simulation.R", echo=TRUE)
source("~/GitHub/density-based-ensemble-model/Simulation.R", echo=TRUE)
source("~/GitHub/density-based-ensemble-model/Simulation.R", echo=TRUE)
genPositiveDefMat(2)
genPositiveDefMat(2)$Sigma
config <- yaml.load_file("config/config_simulation2.yaml")
config
p <- 2
genPositiveDefMat(p)$Sigma / config$Sigma1_divisor
Sigma1 <- genPositiveDefMat(p)$Sigma / config$Sigma1_divisor
Sigma2 <- genPositiveDefMat(p)$Sigma / config$Sigma2_divisor
Sigma3 <- genPositiveDefMat(p)$Sigma / config$Sigma3_divisor
Sigma1
library(mclust)
source("model/prediction_ensemble_model.R")
source("model/ensemble_model.R")
source("model/select_observation.R")
source("model/score.R")
source("model/model_comparison.R")
source("model/weights_generation.R")
source("model/simulation.R")
source("utils/visualizationResult.R")
library(mclust)
source("model/prediction_ensemble_model.R")
source("model/ensemble_model.R")
source("model/select_observation.R")
source("model/score.R")
source("model/model_comparison.R")
source("model/weights_generation.R")
source("model/simulation.R")
library(caret)
library(rsample)
library(mvtnorm)
library(LaplacesDemon)
library(gtools)
library(DirichletReg)
library(grid)
library(gridExtra)
library(dplyr)
library(ggplot2)
library(GGally)
library(reshape2)
data <- read.csv("data/data.txt")
library(readxl)
ground_truth <- as.data.frame(read_excel("data/ground_truth.xlsx"))
colnames(ground_truth) <- ground_truth[2,]
ground_truth <- ground_truth[3:78,1:9]
ground_truth <- ground_truth[order(ground_truth$LESION),]
set <- c(114, 174, 476, 490, 604)
df <- t(data[set,seq(1,152,2)])
df <- df[order(rownames(df)),]
Y <- data.frame("Expert1" = ground_truth$`EXPERT 1`,
"Expert2" = ground_truth$`EXPERT 2`,
"Expert3" = ground_truth$`EXPERT 3`,
"Expert4" = ground_truth$`EXPERT 4`,
"Beginner1" = ground_truth$`BEGINNER 1`,
"Beginner2" = ground_truth$`BEGINNER 2`,
"Beginner3" = ground_truth$`BEGINNER 3`)
df_label <- data.frame(df,
"truth" = ground_truth$`GROUND TRUTH`,
Y)
N= 50
library(gridExtra)
path <- getwd()
pair_data <- df_label[,1:6]
colnames(pair_data) <- c("V113", "V173", "V475", "V489","V603")
pair_plot <- ggpairs(pair_data[,1:5], aes(color = truth, alpha = 0.5),
upper = list(continuous = wrap('cor', size = 2)))+
scale_fill_manual(values=c('red','green','blue')) +
scale_colour_manual(values=c('red','green','blue'))
pair_plot
library(gridExtra)
path <- getwd()
pair_data <- df_label[,1:6]
colnames(pair_data) <- c("V113", "V173", "V475", "V489","V603")
pair_plot <- ggpairs(pair_data[,1:5], aes(color = truth, alpha = 0.5),
upper = list(continuous = wrap('cor', size = 2)))+
scale_fill_manual(values=c('red','green','blue')) +
scale_colour_manual(values=c('red','green','blue'))
pair_data
library(gridExtra)
path <- getwd()
pair_data <- df_label[,1:6]
colnames(pair_data) <- c("V113", "V173", "V475", "V489","V603","truth")
pair_plot <- ggpairs(pair_data[,1:5], aes(color = truth, alpha = 0.5),
upper = list(continuous = wrap('cor', size = 2)))+
scale_fill_manual(values=c('red','green','blue')) +
scale_colour_manual(values=c('red','green','blue'))
pair_plot
path <- getwd()
pair_data <- df_label[,1:6]
colnames(pair_data) <- c("V113", "V173", "V475", "V489","V603","truth")
pair_data
colnames(pair_data) <- c("V113", "V173", "V475", "V489","V603","truth")
pair_plot <- ggpairs(pair_data[,1:5], aes(color = truth, alpha = 0.5),
upper = list(continuous = wrap('cor', size = 2)))+
scale_fill_manual(values=c('red','green','blue')) +
scale_colour_manual(values=c('red','green','blue'))
